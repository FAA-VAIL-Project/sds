{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"sds - Python - Implementation Example The Python implementation example is located in the file directory lang/python . Three different computational methods for polynomial multiplication are provided: fft : Fast Fourier transform, numpy : numpy.polynomial package, simple : simple multiplication of all monomials. For Python, the run_demo script supports the following processing variants: Action Method Setup Remark complete yes / no data & fft & numpy & simple & ... complete_python yes / no data & fft & numpy & simple data yes / no python fft yes / no python numpy yes / no python simple yes / no The setup parameter controls the creation of a virtual environment.","title":"Home"},{"location":"index.html#sds-python-implementation-example","text":"The Python implementation example is located in the file directory lang/python . Three different computational methods for polynomial multiplication are provided: fft : Fast Fourier transform, numpy : numpy.polynomial package, simple : simple multiplication of all monomials. For Python, the run_demo script supports the following processing variants: Action Method Setup Remark complete yes / no data & fft & numpy & simple & ... complete_python yes / no data & fft & numpy & simple data yes / no python fft yes / no python numpy yes / no python simple yes / no The setup parameter controls the creation of a virtual environment.","title":"sds - Python - Implementation Example"},{"location":"api_documentation.html","text":"sds - API Documentation Module polynomial Class Config Managing the application configuration parameters. Config Managing the application configuration parameters. Source code in src\\polynomial\\sds_config.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 class Config : \"\"\"Managing the application configuration parameters.\"\"\" # ------------------------------------------------------------------ # Global constants. # ------------------------------------------------------------------ _CONFIG_FILE = \"setup.cfg\" _CONFIG_SECTION = \"polynomial\" # ------------------------------------------------------------------ # Initialise the instance. # ------------------------------------------------------------------ def __init__ ( self , config_file = _CONFIG_FILE ) -> None : \"\"\"Initialise the instance. Configuration parameters are managed with class `Config`. With the instantiation of the object first the agreed default values are assigned to the configuration parameters. Subsequently, a configuration file optionally specified with the instantiation call is read. If no configuration file was specified, then an optionally existing `setup.cfg` is used as configuration file. The configuration file must be in `Disutils` format in any case. Example: [polynomial] no_tasks = 10 In case of an error, the instantiation of the Config class is terminated with a PolynomialError exception. Args: config_file (str, optional): The name of the configuration file. Defaults to '\"setup.cfg'. \"\"\" # pylint: disable=duplicate-code # ------------------------------------------------------------------ # Initialize configuration parameters. # ------------------------------------------------------------------ self . _coef_max = 9999 self . _coef_min = - 9999 self . _degree_max = 5200 self . _degree_min = 4800 self . _is_verbose = True self . _no_tasks = 10 # ------------------------------------------------------------------ # Update optionally the configuration parameters from a # configuration file. # ------------------------------------------------------------------ # ERROR.00.904 The specified configuration file '{file}' is either not # a file or does not exist at all. if config_file != Config . _CONFIG_FILE and not os . path . isfile ( config_file ): utils . terminate_fatal ( sds_glob . ERROR_00_904 . replace ( \" {file} \" , config_file )) if os . path . isfile ( config_file ): self . load_config_file ( config_file ) self . _check_all_config_params () # INFO.00.002 The configuration parameters (polynomial) are checked and loaded utils . progress_msg_core ( sds_glob . INFO_00_002 ) # ------------------------------------------------------------------ # Check all configuration parameters. # ------------------------------------------------------------------ def _check_all_config_params ( self ) -> None : \"\"\"Check all configuration parameters.\"\"\" # ERROR.00.907 The number of tasks must be at least 1 and not {no_tasks} if self . _no_tasks < 1 : utils . terminate_fatal ( sds_glob . ERROR_00_907 . replace ( \" {no_tasks} \" , str ( self . _no_tasks )) ) # ERROR.00.908 The minimum degree must be at least 1 and not {degree_min} if self . _degree_min < 1 : utils . terminate_fatal ( sds_glob . ERROR_00_908 . replace ( \" {degree_min} \" , str ( self . _degree_min )) ) # ERROR.00.909 The maximum degree {degree_max} must be at least # equal to the minimum degree {degree_min} if self . _degree_max < self . _degree_min : utils . terminate_fatal ( sds_glob . ERROR_00_909 . replace ( \" {degree_max} \" , str ( self . _degree_max ) . replace ( \" {degree_min} \" , str ( self . _degree_min ) ), ) ) # ERROR.00.910 The maximum coef {coef_max} must be at least # equal to the minimum coef {coef_min} if self . _coef_max < self . _coef_min : utils . terminate_fatal ( sds_glob . ERROR_00_910 . replace ( \" {coef_max} \" , str ( self . _coef_max ) . replace ( \" {coef_min} \" , str ( self . _coef_min )), ) ) # ------------------------------------------------------------------ # Check a boolean configuration parameter value. # ------------------------------------------------------------------ @staticmethod def _check_config_value_bool ( value : bool | str , ) -> bool : \"\"\"Check a boolean configuration parameter value. Args: value (bool|str): The configuration parameter value to be checked. Returns: bool: The boolean configuration parameter value. \"\"\" if isinstance ( value , bool ): return value if value . lower () == \"false\" : return False if value . lower () != \"true\" : # ERROR.00.905 Illegal configuration parameter value '{value}' - # only 'false' or 'true' are allowed utils . terminate_fatal ( sds_glob . ERROR_00_905 . replace ( \" {value} \" , value )) return True # ------------------------------------------------------------------ # Check an integer configuration parameter value. # ------------------------------------------------------------------ @staticmethod def _check_config_value_int ( value : int | str , ) -> int : \"\"\"Check an integer configuration parameter value. Args: value (int|str): The configuration parameter value to be checked. Returns: int: The integer configuration parameter value. \"\"\" if isinstance ( value , str ): try : return int ( value ) except ValueError : # ERROR.00.906 Illegal configuration parameter value '{value}' - # only integers are allowed utils . terminate_fatal ( sds_glob . ERROR_00_906 . replace ( \" {value} \" , value )) return value # ------------------------------------------------------------------ # Check a single configuration parameter. # ------------------------------------------------------------------ def _check_single_config_param ( self , key : str , value : bool | int | str ) -> None : \"\"\"Check a single configuration parameter. Args: key (str): The name of the configuration parameter. value (bool | int | str): The given value of the configuration parameter. \"\"\" key_int = key . lower () if key_int in sds_glob . CONFIG_PARAM_COEF_MAX : self . _coef_max = self . _check_config_value_int ( value ) return if key_int in sds_glob . CONFIG_PARAM_COEF_MIN : self . _coef_min = self . _check_config_value_int ( value ) return if key_int in sds_glob . CONFIG_PARAM_DEGREE_MAX : self . _degree_max = self . _check_config_value_int ( value ) return if key_int in sds_glob . CONFIG_PARAM_DEGREE_MIN : self . _degree_min = self . _check_config_value_int ( value ) return if key_int in sds_glob . CONFIG_PARAM_NO_TASKS : self . _no_tasks = self . _check_config_value_int ( value ) return if key_int in sds_glob . CONFIG_PARAM_VERBOSE : self . _is_verbose = self . _check_config_value_bool ( value ) return # ERROR.00.903 Unknown configuration parameter: Key='{key}' Value='{value} utils . terminate_fatal ( sds_glob . ERROR_00_903 . replace ( \" {key} \" , key ) . replace ( \" {value} \" , str ( value )) ) # ------------------------------------------------------------------ # Getter method: _coef_max. # ------------------------------------------------------------------ def get_coef_max ( self ) -> int : \"\"\"Getter method: _coef_max. Returns: int: The upper limit for the random generation of the coefficients. \"\"\" return self . _coef_max # ------------------------------------------------------------------ # Getter method: _coef_min. # ------------------------------------------------------------------ def get_coef_min ( self ) -> int : \"\"\"Getter method: _coef_min. Returns: int: The lower limit for the random generation of the coefficients. \"\"\" return self . _coef_min # ------------------------------------------------------------------ # Getter method: _degree_max. # ------------------------------------------------------------------ def get_degree_max ( self ) -> int : \"\"\"Getter method: _degree_min. Returns: int: The upper limit for the random generation of the degrees. \"\"\" return self . _degree_max # ------------------------------------------------------------------ # Getter method: _degree_min. # ------------------------------------------------------------------ def get_degree_min ( self ) -> int : \"\"\"Getter method: _degree_min. Returns: int: The lower limit for the random generation of the degrees. \"\"\" return self . _degree_min # ------------------------------------------------------------------ # Getter method: _is_verbose. # ------------------------------------------------------------------ def get_is_verbose ( self ) -> bool : \"\"\"Getter method: _is_verbose. Returns: bool: Showing progress messages. \"\"\" return self . _is_verbose # ------------------------------------------------------------------ # Getter method: _no_tasks. # ------------------------------------------------------------------ def get_no_tasks ( self ) -> int : \"\"\"Getter method: _no_tasks. Returns: int: The number of tasks to be generated. \"\"\" return self . _no_tasks # ------------------------------------------------------------------ # Load and check the configuration parameters from a # configuration file. # ------------------------------------------------------------------ def load_config_file ( self , config_file : str ) -> None : \"\"\"Load and check the configuration parameters from a configuration file. Args: config_file (str): Configuration file name. \"\"\" # INFO.00.003 Initialize the configuration parameters using the file {file} utils . progress_msg_core ( sds_glob . INFO_00_001 . replace ( \" {file} \" , config_file )) config_parser = configparser . ConfigParser () config_parser . read ( config_file ) for section in config_parser . sections (): if section in ( Config . _CONFIG_SECTION ,): for ( key , value ) in config_parser . items ( section ): self . _check_config_param ( key , value ) # ------------------------------------------------------------------ # Setter method: _coef_min & _coef_max. # ------------------------------------------------------------------ def set_coef ( self , coef_min : int , coef_max : int ) -> None : \"\"\"Setter method: _coef_min & _coef_max. Args: coef_min (int): The lower limit for the random generation of the coefficients. coef_max (int): The upper limit for the random generation of the coefficients. \"\"\" self . _coef_min = coef_min self . _coef_max = coef_max self . _check_all_config_params () # ------------------------------------------------------------------ # Modify the value of an existing configuration parameter. # ------------------------------------------------------------------ def set_config_value ( self , key : str , value : bool | int | str ) -> None : \"\"\"Modify the value of an existing configuration parameter. Args: key (str): The name of the configuration parameter. value (bool | int | str): The new value of the configuration parameter. \"\"\" self . _check_config_param ( key , value ) # ------------------------------------------------------------------ # Setter method: _degree_min & _degree_max. # ------------------------------------------------------------------ def set_degree ( self , degree_min : int , degree_max : int ) -> None : \"\"\"Setter method: _degree_min & _degree_max. Args: degree_min (int): The lower limit for the random generation of the degrees. degree_max (int): The upper limit for the random generation of the degrees. \"\"\" self . _degree_min = degree_min self . _degree_max = degree_max self . _check_all_config_params () # ------------------------------------------------------------------ # Setter method: _is_verbose. # ------------------------------------------------------------------ def set_is_verbose ( self , is_verbose : bool ) -> None : \"\"\"Setter method: _is_verbose. Args: is_verbose (bool): Showing progress messages. \"\"\" self . _is_verbose = is_verbose self . _check_all_config_params () # ------------------------------------------------------------------ # Setter method: _no_tasks. # ------------------------------------------------------------------ def set_no_tasks ( self , no_tasks : int ) -> None : \"\"\"Setter method: _no_tasks. Args: no_tasks (int): The number of tasks to be generated \"\"\" self . _no_tasks = no_tasks self . _check_all_config_params () __init__ ( config_file = _CONFIG_FILE ) Initialise the instance. Configuration parameters are managed with class Config . With the instantiation of the object first the agreed default values are assigned to the configuration parameters. Subsequently, a configuration file optionally specified with the instantiation call is read. If no configuration file was specified, then an optionally existing setup.cfg is used as configuration file. The configuration file must be in Disutils format in any case. Example: [polynomial] no_tasks = 10 In case of an error, the instantiation of the Config class is terminated with a PolynomialError exception. Parameters: Name Type Description Default config_file str The name of the configuration file. Defaults to '\"setup.cfg'. _CONFIG_FILE Source code in src\\polynomial\\sds_config.py 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 def __init__ ( self , config_file = _CONFIG_FILE ) -> None : \"\"\"Initialise the instance. Configuration parameters are managed with class `Config`. With the instantiation of the object first the agreed default values are assigned to the configuration parameters. Subsequently, a configuration file optionally specified with the instantiation call is read. If no configuration file was specified, then an optionally existing `setup.cfg` is used as configuration file. The configuration file must be in `Disutils` format in any case. Example: [polynomial] no_tasks = 10 In case of an error, the instantiation of the Config class is terminated with a PolynomialError exception. Args: config_file (str, optional): The name of the configuration file. Defaults to '\"setup.cfg'. \"\"\" # pylint: disable=duplicate-code # ------------------------------------------------------------------ # Initialize configuration parameters. # ------------------------------------------------------------------ self . _coef_max = 9999 self . _coef_min = - 9999 self . _degree_max = 5200 self . _degree_min = 4800 self . _is_verbose = True self . _no_tasks = 10 # ------------------------------------------------------------------ # Update optionally the configuration parameters from a # configuration file. # ------------------------------------------------------------------ # ERROR.00.904 The specified configuration file '{file}' is either not # a file or does not exist at all. if config_file != Config . _CONFIG_FILE and not os . path . isfile ( config_file ): utils . terminate_fatal ( sds_glob . ERROR_00_904 . replace ( \" {file} \" , config_file )) if os . path . isfile ( config_file ): self . load_config_file ( config_file ) self . _check_all_config_params () # INFO.00.002 The configuration parameters (polynomial) are checked and loaded utils . progress_msg_core ( sds_glob . INFO_00_002 ) get_coef_max () Getter method: _coef_max. Returns: Name Type Description int int The upper limit for the random generation of the coefficients. Source code in src\\polynomial\\sds_config.py 219 220 221 222 223 224 225 def get_coef_max ( self ) -> int : \"\"\"Getter method: _coef_max. Returns: int: The upper limit for the random generation of the coefficients. \"\"\" return self . _coef_max get_coef_min () Getter method: _coef_min. Returns: Name Type Description int int The lower limit for the random generation of the coefficients. Source code in src\\polynomial\\sds_config.py 230 231 232 233 234 235 236 def get_coef_min ( self ) -> int : \"\"\"Getter method: _coef_min. Returns: int: The lower limit for the random generation of the coefficients. \"\"\" return self . _coef_min get_degree_max () Getter method: _degree_min. Returns: Name Type Description int int The upper limit for the random generation of the degrees. Source code in src\\polynomial\\sds_config.py 241 242 243 244 245 246 247 def get_degree_max ( self ) -> int : \"\"\"Getter method: _degree_min. Returns: int: The upper limit for the random generation of the degrees. \"\"\" return self . _degree_max get_degree_min () Getter method: _degree_min. Returns: Name Type Description int int The lower limit for the random generation of the degrees. Source code in src\\polynomial\\sds_config.py 252 253 254 255 256 257 258 def get_degree_min ( self ) -> int : \"\"\"Getter method: _degree_min. Returns: int: The lower limit for the random generation of the degrees. \"\"\" return self . _degree_min get_is_verbose () Getter method: _is_verbose. Returns: Name Type Description bool bool Showing progress messages. Source code in src\\polynomial\\sds_config.py 263 264 265 266 267 268 269 def get_is_verbose ( self ) -> bool : \"\"\"Getter method: _is_verbose. Returns: bool: Showing progress messages. \"\"\" return self . _is_verbose get_no_tasks () Getter method: _no_tasks. Returns: Name Type Description int int The number of tasks to be generated. Source code in src\\polynomial\\sds_config.py 274 275 276 277 278 279 280 def get_no_tasks ( self ) -> int : \"\"\"Getter method: _no_tasks. Returns: int: The number of tasks to be generated. \"\"\" return self . _no_tasks load_config_file ( config_file ) Load and check the configuration parameters from a configuration file. Parameters: Name Type Description Default config_file str Configuration file name. required Source code in src\\polynomial\\sds_config.py 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 def load_config_file ( self , config_file : str ) -> None : \"\"\"Load and check the configuration parameters from a configuration file. Args: config_file (str): Configuration file name. \"\"\" # INFO.00.003 Initialize the configuration parameters using the file {file} utils . progress_msg_core ( sds_glob . INFO_00_001 . replace ( \" {file} \" , config_file )) config_parser = configparser . ConfigParser () config_parser . read ( config_file ) for section in config_parser . sections (): if section in ( Config . _CONFIG_SECTION ,): for ( key , value ) in config_parser . items ( section ): self . _check_config_param ( key , value ) set_coef ( coef_min , coef_max ) Setter method: _coef_min & _coef_max. Parameters: Name Type Description Default coef_min int The lower limit for the random generation of the coefficients. required coef_max int The upper limit for the random generation of the coefficients. required Source code in src\\polynomial\\sds_config.py 308 309 310 311 312 313 314 315 316 317 318 319 320 def set_coef ( self , coef_min : int , coef_max : int ) -> None : \"\"\"Setter method: _coef_min & _coef_max. Args: coef_min (int): The lower limit for the random generation of the coefficients. coef_max (int): The upper limit for the random generation of the coefficients. \"\"\" self . _coef_min = coef_min self . _coef_max = coef_max self . _check_all_config_params () set_config_value ( key , value ) Modify the value of an existing configuration parameter. Parameters: Name Type Description Default key str The name of the configuration parameter. required value bool | int | str The new value of the configuration parameter. required Source code in src\\polynomial\\sds_config.py 325 326 327 328 329 330 331 332 333 334 def set_config_value ( self , key : str , value : bool | int | str ) -> None : \"\"\"Modify the value of an existing configuration parameter. Args: key (str): The name of the configuration parameter. value (bool | int | str): The new value of the configuration parameter. \"\"\" self . _check_config_param ( key , value ) set_degree ( degree_min , degree_max ) Setter method: _degree_min & _degree_max. Parameters: Name Type Description Default degree_min int The lower limit for the random generation of the degrees. required degree_max int The upper limit for the random generation of the degrees. required Source code in src\\polynomial\\sds_config.py 339 340 341 342 343 344 345 346 347 348 349 350 351 def set_degree ( self , degree_min : int , degree_max : int ) -> None : \"\"\"Setter method: _degree_min & _degree_max. Args: degree_min (int): The lower limit for the random generation of the degrees. degree_max (int): The upper limit for the random generation of the degrees. \"\"\" self . _degree_min = degree_min self . _degree_max = degree_max self . _check_all_config_params () set_is_verbose ( is_verbose ) Setter method: _is_verbose. Parameters: Name Type Description Default is_verbose bool Showing progress messages. required Source code in src\\polynomial\\sds_config.py 356 357 358 359 360 361 362 363 364 def set_is_verbose ( self , is_verbose : bool ) -> None : \"\"\"Setter method: _is_verbose. Args: is_verbose (bool): Showing progress messages. \"\"\" self . _is_verbose = is_verbose self . _check_all_config_params () set_no_tasks ( no_tasks ) Setter method: _no_tasks. Parameters: Name Type Description Default no_tasks int The number of tasks to be generated required Source code in src\\polynomial\\sds_config.py 369 370 371 372 373 374 375 376 377 def set_no_tasks ( self , no_tasks : int ) -> None : \"\"\"Setter method: _no_tasks. Args: no_tasks (int): The number of tasks to be generated \"\"\" self . _no_tasks = no_tasks self . _check_all_config_params () Class Generator Class for generating a JSON file with tasks. Generator Class for generating a JSON file with tasks. Source code in src\\polynomial\\generator.pyclass Generator : \"\"\"Class for generating a JSON file with tasks.\"\"\" # ------------------------------------------------------------------ # Initialise the instance. # ------------------------------------------------------------------ def __init__ ( self , file_name ) -> None : \"\"\"Generate the tasks. Using configuration parameters in the 'setup.cfg' file, a JSON file containing polynomial pairs and their product as tasks can be generated with an instance of this class. Args: file_name (str): The name of the JSON file to output. \"\"\" # pylint: disable=duplicate-code sds_glob . logger . debug ( sds_glob . LOGGER_START ) # Provide progress messages. utils . progress_msg ( \"-\" * 79 ) # INFO.00.011 Start Generator utils . progress_msg ( sds_glob . INFO_00_011 ) utils . progress_msg ( \"-\" * 79 ) self . _file_name = file_name # Create polynomial pairs with random values and calculate # the product. Each generated triple defines a task for the # 'Multiplier' class. self . _tasks = [] for no_task in range ( sds_glob . inst_config . get_no_tasks ()): self . _tasks . append ( self . _generate_polynom ( no_task )) # Write the generated polynomials along with their product # to a JSON file for use in the 'Multiplier' class. self . _create_json_file () # Provide progress messages. utils . progress_msg ( \"-\" * 79 ) # INFO.00.012 End Generator utils . progress_msg ( sds_glob . INFO_00_012 ) utils . progress_msg ( \"-\" * 79 ) sds_glob . logger . debug ( sds_glob . LOGGER_END ) # ------------------------------------------------------------------ # Create the JSON file. # ------------------------------------------------------------------ def _create_json_file ( self ) -> None : \"\"\"Create the JSON file. The file structure looks as follows: { \"moTasks\": 999, \"tasks\": [ { \"taskNo\": 999, \"polynom1\": { \"degree\": 999, \"coefficients\": [ 999, ... ] }, \"polynom2\": { \"degree\": 999, \"coefficients\": [ 999, ... ] }, \"product\": { \"degree\": 999, \"coefficients\": [ 999, ... ] } }, ... ] } \"\"\" tasks = [] for task_no , ( polynom_1 , polynom_2 , product ) in enumerate ( self . _tasks ): tasks . append ( { sds_glob . JSON_NAME_TASK_NO : task_no + 1 , sds_glob . JSON_NAME_POLYNOM_1 : { sds_glob . JSON_NAME_DEGREE : polynom_1 . degree (), sds_glob . JSON_NAME_COEFFICIENTS : list ( int ( x ) for x in polynom_1 . coef ), }, sds_glob . JSON_NAME_POLYNOM_2 : { sds_glob . JSON_NAME_DEGREE : polynom_2 . degree (), sds_glob . JSON_NAME_COEFFICIENTS : list ( int ( x ) for x in polynom_2 . coef ), }, sds_glob . JSON_NAME_PRODUCT : { sds_glob . JSON_NAME_DEGREE : product . degree (), sds_glob . JSON_NAME_COEFFICIENTS : list ( int ( x ) for x in product . coef ), }, } ) with open ( self . _file_name , \"w\" , encoding = sds_glob . FILE_ENCODING_DEFAULT ) as file_handle : json . dump ( { sds_glob . JSON_NAME_NO_TASKS : sds_glob . inst_config . get_no_tasks (), sds_glob . JSON_NAME_TASKS : tasks , }, file_handle , indent = 4 , sort_keys = False , ) # ------------------------------------------------------------------ # Generation a task consisting of a polynomial pair and # their product. # ------------------------------------------------------------------ @staticmethod def _generate_task ( no_task : int ) -> Tuple [ Polynomial , Polynomial , Polynomial ]: \"\"\"Generation a task consisting of a polynomial pair and their product. The degree of the polynomials and the coefficients are determined in a given range as random integers Args: no_task (int): The task number Returns: Tuple[Polynomial, Polynomial, Polynomial]: Polynomial 1, Polynomial 2 and Polynomial 1 * Polynomial 2. \"\"\" # Start time measurement. start_time = time . time_ns () # Creation of the first polynomial. polynom_1 = Polynomial ( numpy . random . randint ( sds_glob . inst_config . get_coef_min (), sds_glob . inst_config . get_coef_max (), random . randint ( # nosec sds_glob . inst_config . get_degree_min (), sds_glob . inst_config . get_degree_max (), ), ) ) # Creation of the second polynomial. polynom_2 = Polynomial ( numpy . random . randint ( sds_glob . inst_config . get_coef_min (), sds_glob . inst_config . get_coef_max (), random . randint ( # nosec sds_glob . inst_config . get_degree_min (), sds_glob . inst_config . get_degree_max (), ), ) ) # Calculation of the product. product = polynom_1 * polynom_2 # Stop time measurement and store the results. utils . progress_msg_time_elapsed ( time . time_ns () - start_time , f \"task no. { no_task + 1 : 2d } (degrees: { polynom_1 . degree () : 5d } - \" + f \" { polynom_2 . degree () : 5d } - { product . degree () : 5d } ) generated\" , ) return polynom_1 , polynom_2 , product __init__ ( file_name ) Generate the tasks. Using configuration parameters in the 'setup.cfg' file, a JSON file containing polynomial pairs and their product as tasks can be generated with an instance of this class. Parameters: Name Type Description Default file_name str The name of the JSON file to output. required Source code in src\\polynomial\\generator.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 def __init__ ( self , file_name ) -> None : \"\"\"Generate the tasks. Using configuration parameters in the 'setup.cfg' file, a JSON file containing polynomial pairs and their product as tasks can be generated with an instance of this class. Args: file_name (str): The name of the JSON file to output. \"\"\" # pylint: disable=duplicate-code sds_glob . logger . debug ( sds_glob . LOGGER_START ) # Provide progress messages. utils . progress_msg ( \"-\" * 79 ) # INFO.00.011 Start Generator utils . progress_msg ( sds_glob . INFO_00_011 ) utils . progress_msg ( \"-\" * 79 ) self . _file_name = file_name # Create polynomial pairs with random values and calculate # the product. Each generated triple defines a task for the # 'Multiplier' class. self . _tasks = [] for no_task in range ( sds_glob . inst_config . get_no_tasks ()): self . _tasks . append ( self . _generate_polynom ( no_task )) # Write the generated polynomials along with their product # to a JSON file for use in the 'Multiplier' class. self . _create_json_file () # Provide progress messages. utils . progress_msg ( \"-\" * 79 ) # INFO.00.012 End Generator utils . progress_msg ( sds_glob . INFO_00_012 ) utils . progress_msg ( \"-\" * 79 ) sds_glob . logger . debug ( sds_glob . LOGGER_END ) Class Multiplier Class for multiplying the polynomials and checking the result. Multiplier Class for multiplying the polynomials and checking the resulting product. Source code in src\\polynomial\\multiplier.pyclass Multiplier : \"\"\"Class for multiplying the polynomials and checking the resulting product.\"\"\" # ------------------------------------------------------------------ # Initialise the instance. # ------------------------------------------------------------------ def __init__ ( self , file_name : str , method : str ) -> None : \"\"\"Perform the tasks from the JSON file. An instance of this class processes a JSON file created by the 'Generator' class. Three different methods for calculating the polynomial products are provided: 'fft' - a Fast Fourier Transform oriented method. 'numpy' - the polynomial multiplication of the polynomial module of NumPy 'simple' - a sequential multiplication of all terms of the two polynomials with each other and then a summation of the like terms Args: file_name (str): The name of the JSON file to process. method (str): The processing method: fft, numpy or simple. \"\"\" # pylint: disable=duplicate-code # Start the run-related time measurement. start_time = time . time_ns () sds_glob . logger . debug ( sds_glob . LOGGER_START ) # Provide progress messages. utils . progress_msg ( \"-\" * 79 ) # INFO.00.021 Start Multiplier - Python - {method} utils . progress_msg ( sds_glob . INFO_00_021 . replace ( \" {method} \" , method )) utils . progress_msg ( \"-\" * 79 ) self . _file_name = file_name self . _method = method # Check if the specified JSON file with the polynomials exists. if not os . path . isfile ( file_name ): # ERROR.00.902 The specified JSON file {file_name} does not exist utils . terminate_fatal ( sds_glob . ERROR_00_902 . replace ( \" {file_name} \" , file_name ) ) self . _poly_1_coeff : list [ int ] = [] self . _poly_1_degree = 0 self . _poly_2_coeff : list [ int ] = [] self . _poly_2_degree = 0 self . _prod_coeff : list [ int ] = [] self . _prod_degree = 0 self . _statistics : list [ tuple [ int , int , int , int ]] = [] self . _task_no = 0 # Process the polynomial multiplication tasks contained in the JSON file. with open ( self . _file_name , \"r\" , encoding = sds_glob . FILE_ENCODING_DEFAULT ) as file_handle : json_data = json . load ( file_handle ) for task_no , task in enumerate ( json_data [ sds_glob . JSON_NAME_TASKS ]): # Start the task-related time measurement. start_time_task = time . time_ns () # Store the data from the JSON file for polynomial multiplication # in instance variables self . _poly_1_coeff = task [ sds_glob . JSON_NAME_POLYNOM_1 ][ sds_glob . JSON_NAME_COEFFICIENTS ] self . _poly_1_degree = task [ sds_glob . JSON_NAME_POLYNOM_1 ][ sds_glob . JSON_NAME_DEGREE ] self . _poly_2_coeff = task [ sds_glob . JSON_NAME_POLYNOM_2 ][ sds_glob . JSON_NAME_COEFFICIENTS ] self . _poly_2_degree = task [ sds_glob . JSON_NAME_POLYNOM_2 ][ sds_glob . JSON_NAME_DEGREE ] self . _prod_coeff = task [ sds_glob . JSON_NAME_PRODUCT ][ sds_glob . JSON_NAME_COEFFICIENTS ] self . _prod_degree = task [ sds_glob . JSON_NAME_PRODUCT ][ sds_glob . JSON_NAME_DEGREE ] self . _task_no = task_no # Calculate and check the polynomial product. self . _process_task () # Stop the timing and save the measurement results. duration_task = time . time_ns () - start_time_task self . _statistics . append ( ( duration_task , self . _poly_1_degree , self . _poly_2_degree , self . _prod_degree , ) ) # Print the statistics data for this run. self . _show_statistics () # Provide progress messages. utils . progress_msg ( \"-\" * 79 ) utils . progress_msg_time_elapsed ( time . time_ns () - start_time , \"Python - \" + self . _method , ) utils . progress_msg ( \"-\" * 79 ) # INFO.00.022 End Multiplier - Python - {method} utils . progress_msg ( sds_glob . INFO_00_022 . replace ( \" {method} \" , self . _method )) utils . progress_msg ( \"-\" * 79 ) sds_glob . logger . debug ( sds_glob . LOGGER_END ) # ------------------------------------------------------------------ # Multiply the polynomials by applying Fast Fourier transform. # ------------------------------------------------------------------ def _multiply_fft ( self ): \"\"\"Multiply the polynomials by applying Fast Fourier transform.\"\"\" pass # ------------------------------------------------------------------ # Multiply the polynomials by applying the NumPy polynomial methods. # ------------------------------------------------------------------ def _multiply_numpy ( self ) -> ndarray : \"\"\"Multiply the polynomials by applying the NumPy polynomial methods. Returns: ndarray: The product of the polynomials. \"\"\" return numpy . polynomial . Polynomial ( self . _poly_1_coeff ) * numpy . polynomial . Polynomial ( self . _poly_2_coeff ) # ------------------------------------------------------------------ # Multiply the polynomials by applying the simple method. # ------------------------------------------------------------------ def _multiply_simple ( self , ) -> ndarray : \"\"\"Multiply the polynomials by applying the simple method. Returns: ndarray: The product of the polynomials. \"\"\" result = numpy . zeros ( len ( self . _poly_1_coeff ) + len ( self . _poly_2_coeff ), dtype = numpy . int64 ) # Multiply abd collect the like terms for degree_1 , coeff_1 in enumerate ( self . _poly_1_coeff ): if coeff_1 != 0 : for degree_2 , coeff_2 in enumerate ( self . _poly_2_coeff ): if coeff_2 != 0 : result [ degree_1 + degree_2 ] += coeff_1 * coeff_2 # Eliminate the leading zero terms and determine # the final degree of the polynomial product. zeros = [] for degree in range ( len ( result ) - 1 , - 1 , - 1 ): if result [ degree ] == 0 : zeros . append ( degree ) else : break if zeros : result = numpy . delete ( result , zeros ) return result # ------------------------------------------------------------------ # Perform the processing of a polynomial multiplication task. # ------------------------------------------------------------------ def _process_task ( self ): \"\"\"Perform the processing of a polynomial multiplication task.\"\"\" result = [] if self . _method == sds_glob . ARG_METHOD_FFT : self . _multiply_fft () elif self . _method == sds_glob . ARG_METHOD_NUMPY : self . _multiply_numpy () else : result = self . _multiply_simple () # Compare the new calculated product with the given product # in the JSON file. for degree , coeff in enumerate ( result ): if coeff != self . _prod_coeff [ degree ]: # ERROR.00.911 Difference in task no. {task_no} degree {degree} # got {got} instead of {instead} utils . terminate_fatal ( sds_glob . ERROR_00_911 . replace ( \" {task_no} \" , str ( self . _task_no + 1 )) . replace ( \" {degree} \" , str ( degree )) . replace ( \" {got} \" , str ( coeff )) . replace ( \" {instead} \" , str ( self . _prod_coeff [ degree ]), ) ) # ------------------------------------------------------------------ # Display the statistics. # ------------------------------------------------------------------ def _show_statistics ( self ): \"\"\"Display the statistics.\"\"\" for task_no , ( duration , poly_1_degree , poly_2_degree , prod_degree , ) in enumerate ( self . _statistics ): utils . progress_msg_time_elapsed ( duration , f \"task no. { task_no + 1 : 2d } (degrees: { poly_1_degree : 5d } - \" + f \" { poly_2_degree : 5d } - { prod_degree : 5d } ) executed\" , ) __init__ ( file_name , method ) Perform the tasks from the JSON file. An instance of this class processes a JSON file created by the 'Generator' class. Three different methods for calculating the polynomial products are provided 'fft' - a Fast Fourier Transform oriented method. 'numpy' - the polynomial multiplication of the polynomial module of NumPy 'simple' - a sequential multiplication of all terms of the two polynomials with each other and then a summation of the like terms Parameters: Name Type Description Default file_name str The name of the JSON file to process. required method str The processing method: fft, numpy or simple. required Source code in src\\polynomial\\multiplier.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 def __init__ ( self , file_name : str , method : str ) -> None : \"\"\"Perform the tasks from the JSON file. An instance of this class processes a JSON file created by the 'Generator' class. Three different methods for calculating the polynomial products are provided: 'fft' - a Fast Fourier Transform oriented method. 'numpy' - the polynomial multiplication of the polynomial module of NumPy 'simple' - a sequential multiplication of all terms of the two polynomials with each other and then a summation of the like terms Args: file_name (str): The name of the JSON file to process. method (str): The processing method: fft, numpy or simple. \"\"\" # pylint: disable=duplicate-code # Start the run-related time measurement. start_time = time . time_ns () sds_glob . logger . debug ( sds_glob . LOGGER_START ) # Provide progress messages. utils . progress_msg ( \"-\" * 79 ) # INFO.00.021 Start Multiplier - Python - {method} utils . progress_msg ( sds_glob . INFO_00_021 . replace ( \" {method} \" , method )) utils . progress_msg ( \"-\" * 79 ) self . _file_name = file_name self . _method = method # Check if the specified JSON file with the polynomials exists. if not os . path . isfile ( file_name ): # ERROR.00.902 The specified JSON file {file_name} does not exist utils . terminate_fatal ( sds_glob . ERROR_00_902 . replace ( \" {file_name} \" , file_name ) ) self . _poly_1_coeff : list [ int ] = [] self . _poly_1_degree = 0 self . _poly_2_coeff : list [ int ] = [] self . _poly_2_degree = 0 self . _prod_coeff : list [ int ] = [] self . _prod_degree = 0 self . _statistics : list [ tuple [ int , int , int , int ]] = [] self . _task_no = 0 # Process the polynomial multiplication tasks contained in the JSON file. with open ( self . _file_name , \"r\" , encoding = sds_glob . FILE_ENCODING_DEFAULT ) as file_handle : json_data = json . load ( file_handle ) for task_no , task in enumerate ( json_data [ sds_glob . JSON_NAME_TASKS ]): # Start the task-related time measurement. start_time_task = time . time_ns () # Store the data from the JSON file for polynomial multiplication # in instance variables self . _poly_1_coeff = task [ sds_glob . JSON_NAME_POLYNOM_1 ][ sds_glob . JSON_NAME_COEFFICIENTS ] self . _poly_1_degree = task [ sds_glob . JSON_NAME_POLYNOM_1 ][ sds_glob . JSON_NAME_DEGREE ] self . _poly_2_coeff = task [ sds_glob . JSON_NAME_POLYNOM_2 ][ sds_glob . JSON_NAME_COEFFICIENTS ] self . _poly_2_degree = task [ sds_glob . JSON_NAME_POLYNOM_2 ][ sds_glob . JSON_NAME_DEGREE ] self . _prod_coeff = task [ sds_glob . JSON_NAME_PRODUCT ][ sds_glob . JSON_NAME_COEFFICIENTS ] self . _prod_degree = task [ sds_glob . JSON_NAME_PRODUCT ][ sds_glob . JSON_NAME_DEGREE ] self . _task_no = task_no # Calculate and check the polynomial product. self . _process_task () # Stop the timing and save the measurement results. duration_task = time . time_ns () - start_time_task self . _statistics . append ( ( duration_task , self . _poly_1_degree , self . _poly_2_degree , self . _prod_degree , ) ) # Print the statistics data for this run. self . _show_statistics () # Provide progress messages. utils . progress_msg ( \"-\" * 79 ) utils . progress_msg_time_elapsed ( time . time_ns () - start_time , \"Python - \" + self . _method , ) utils . progress_msg ( \"-\" * 79 ) # INFO.00.022 End Multiplier - Python - {method} utils . progress_msg ( sds_glob . INFO_00_022 . replace ( \" {method} \" , self . _method )) utils . progress_msg ( \"-\" * 79 ) sds_glob . logger . debug ( sds_glob . LOGGER_END ) Class PolynomialError Exception of polynomial application. PolynomialError Bases: RuntimeError Exception of polynomial application. Source code in src\\polynomial\\polynomial_error.py 8 9 10 11 12 13 class PolynomialError ( RuntimeError ): \"\"\"Exception of **polynomial** application.\"\"\" def __init__ ( self , error_msg ): \"\"\"Constructor.\"\"\" super () . __init__ ( error_msg ) __init__ ( error_msg ) Constructor. Source code in src\\polynomial\\polynomial_error.py 11 12 13 def __init__ ( self , error_msg ): \"\"\"Constructor.\"\"\" super () . __init__ ( error_msg ) Module launcher Module polynomial: Entry Point Functionality. This is the entry point to the application polynomial . main ( argv ) Entry point. The actions to be carried out are selected via command line arguments. Parameters: Name Type Description Default argv list [ str ] Command line arguments. required Source code in src\\polynomial\\launcher.py 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 def main ( argv : list [ str ]) -> None : \"\"\"Entry point. The actions to be carried out are selected via command line arguments. Args: argv (list[str]): Command line arguments. \"\"\" # Start time measurement. start_time = time . time_ns () # Provide progress messages. utils . progress_msg ( \"=\" * 79 ) # INFO.00.004 Start Launcher. utils . progress_msg ( sds_glob . INFO_00_003 ) # Initialise the logging functionality.. utils . initialise_logger () sds_glob . logger . debug ( sds_glob . LOGGER_START ) sds_glob . logger . debug ( \"param argv= %s \" , argv ) locale . setlocale ( locale . LC_ALL , _LOCALE ) # Load the command line arguments. args = _get_args () # Take JSON file name from environment variable file_name = os . getenv ( sds_glob . POLYNOMIAL_FILE_NAME ) # Perform the processing if args [ _ARG_ACTION ] == sds_glob . ARG_ACTION_GENERATE : generator . Generator ( file_name ) elif args [ _ARG_ACTION ] == sds_glob . ARG_ACTION_MULTIPLY : multiplier . Multiplier ( file_name , args [ _ARG_METHOD ]) # Stop time measurement. utils . progress_msg_time_elapsed ( time . time_ns () - start_time , \"launcher\" , ) # Provide progress messages. utils . progress_msg ( \"-\" * 79 ) # INFO.00.005 End Launcher utils . progress_msg ( sds_glob . INFO_00_006 ) utils . progress_msg ( \"=\" * 79 ) sds_glob . logger . debug ( sds_glob . LOGGER_END ) Module utils Miscellaneous helper functions. initialise_logger () Initialise the root logging functionality. Source code in src\\polynomial\\utils.py 26 27 28 29 30 31 32 33 34 35 36 37 def initialise_logger () -> None : \"\"\"Initialise the root logging functionality.\"\"\" with open ( _LOGGER_CFG_FILE , \"r\" , encoding = sds_glob . FILE_ENCODING_DEFAULT ) as file_handle : log_config = yaml . safe_load ( file_handle . read ()) logging . config . dictConfig ( log_config ) sds_glob . logger . setLevel ( logging . DEBUG ) # The logger is configured and ready. progress_msg_core ( sds_glob . INFO_00_004 ) progress_msg ( msg ) Create a progress message. Parameters: Name Type Description Default msg str Progress message. required Source code in src\\polynomial\\utils.py 43 44 45 46 47 48 49 50 def progress_msg ( msg : str ) -> None : \"\"\"Create a progress message. Args: msg (str): Progress message. \"\"\" if sds_glob . inst_config . get_is_verbose (): progress_msg_core ( msg ) progress_msg_core ( msg ) Create a progress message. Parameters: Name Type Description Default msg str Progress message. required Source code in src\\polynomial\\utils.py 56 57 58 59 60 61 62 63 64 65 66 67 def progress_msg_core ( msg : str ) -> None : \"\"\"Create a progress message. Args: msg (str): Progress message. \"\"\" final_msg = _LOGGER_PROGRESS_UPDATE + str ( datetime . datetime . now ()) + \" : \" + msg if msg not in ( \"\" , \"-\" * 80 , \"=\" * 80 ): final_msg = final_msg + \".\" print ( final_msg ) progress_msg_time_elapsed ( duration , event ) Create a time elapsed message. Parameters: Name Type Description Default duration int Time elapsed in ns. required event str Event. required Source code in src\\polynomial\\utils.py 73 74 75 76 77 78 79 80 81 82 83 def progress_msg_time_elapsed ( duration : int , event : str ) -> None : \"\"\"Create a time elapsed message. Args: duration (int): Time elapsed in ns. event (str): Event. \"\"\" if sds_glob . inst_config . get_is_verbose (): progress_msg_core ( f \" { f ' { duration : , } ' : >20 } ns - Total time { event } \" , ) terminate_fatal ( error_msg ) Terminate the application immediately. Parameters: Name Type Description Default error_msg str Error message. required Source code in src\\polynomial\\utils.py 89 90 91 92 93 94 95 96 97 98 99 100 def terminate_fatal ( error_msg : str ) -> None : \"\"\"Terminate the application immediately. Args: error_msg (str): Error message. \"\"\" print ( \"\" ) print ( _LOGGER_FATAL_HEAD ) print ( _LOGGER_FATAL_HEAD , error_msg , _LOGGER_FATAL_TAIL , sep = \"\" ) print ( _LOGGER_FATAL_HEAD ) raise PolynomialError ( error_msg )","title":"API Documentation"},{"location":"api_documentation.html#sds-api-documentation-module-polynomial","text":"","title":"sds - API Documentation Module polynomial"},{"location":"api_documentation.html#class-config","text":"Managing the application configuration parameters.","title":"Class Config"},{"location":"api_documentation.html#src.polynomial.sds_config.Config","text":"Managing the application configuration parameters. Source code in src\\polynomial\\sds_config.pyclass Config : \"\"\"Managing the application configuration parameters.\"\"\" # ------------------------------------------------------------------ # Global constants. # ------------------------------------------------------------------ _CONFIG_FILE = \"setup.cfg\" _CONFIG_SECTION = \"polynomial\" # ------------------------------------------------------------------ # Initialise the instance. # ------------------------------------------------------------------ def __init__ ( self , config_file = _CONFIG_FILE ) -> None : \"\"\"Initialise the instance. Configuration parameters are managed with class `Config`. With the instantiation of the object first the agreed default values are assigned to the configuration parameters. Subsequently, a configuration file optionally specified with the instantiation call is read. If no configuration file was specified, then an optionally existing `setup.cfg` is used as configuration file. The configuration file must be in `Disutils` format in any case. Example: [polynomial] no_tasks = 10 In case of an error, the instantiation of the Config class is terminated with a PolynomialError exception. Args: config_file (str, optional): The name of the configuration file. Defaults to '\"setup.cfg'. \"\"\" # pylint: disable=duplicate-code # ------------------------------------------------------------------ # Initialize configuration parameters. # ------------------------------------------------------------------ self . _coef_max = 9999 self . _coef_min = - 9999 self . _degree_max = 5200 self . _degree_min = 4800 self . _is_verbose = True self . _no_tasks = 10 # ------------------------------------------------------------------ # Update optionally the configuration parameters from a # configuration file. # ------------------------------------------------------------------ # ERROR.00.904 The specified configuration file '{file}' is either not # a file or does not exist at all. if config_file != Config . _CONFIG_FILE and not os . path . isfile ( config_file ): utils . terminate_fatal ( sds_glob . ERROR_00_904 . replace ( \" {file} \" , config_file )) if os . path . isfile ( config_file ): self . load_config_file ( config_file ) self . _check_all_config_params () # INFO.00.002 The configuration parameters (polynomial) are checked and loaded utils . progress_msg_core ( sds_glob . INFO_00_002 ) # ------------------------------------------------------------------ # Check all configuration parameters. # ------------------------------------------------------------------ def _check_all_config_params ( self ) -> None : \"\"\"Check all configuration parameters.\"\"\" # ERROR.00.907 The number of tasks must be at least 1 and not {no_tasks} if self . _no_tasks < 1 : utils . terminate_fatal ( sds_glob . ERROR_00_907 . replace ( \" {no_tasks} \" , str ( self . _no_tasks )) ) # ERROR.00.908 The minimum degree must be at least 1 and not {degree_min} if self . _degree_min < 1 : utils . terminate_fatal ( sds_glob . ERROR_00_908 . replace ( \" {degree_min} \" , str ( self . _degree_min )) ) # ERROR.00.909 The maximum degree {degree_max} must be at least # equal to the minimum degree {degree_min} if self . _degree_max < self . _degree_min : utils . terminate_fatal ( sds_glob . ERROR_00_909 . replace ( \" {degree_max} \" , str ( self . _degree_max ) . replace ( \" {degree_min} \" , str ( self . _degree_min ) ), ) ) # ERROR.00.910 The maximum coef {coef_max} must be at least # equal to the minimum coef {coef_min} if self . _coef_max < self . _coef_min : utils . terminate_fatal ( sds_glob . ERROR_00_910 . replace ( \" {coef_max} \" , str ( self . _coef_max ) . replace ( \" {coef_min} \" , str ( self . _coef_min )), ) ) # ------------------------------------------------------------------ # Check a boolean configuration parameter value. # ------------------------------------------------------------------ @staticmethod def _check_config_value_bool ( value : bool | str , ) -> bool : \"\"\"Check a boolean configuration parameter value. Args: value (bool|str): The configuration parameter value to be checked. Returns: bool: The boolean configuration parameter value. \"\"\" if isinstance ( value , bool ): return value if value . lower () == \"false\" : return False if value . lower () != \"true\" : # ERROR.00.905 Illegal configuration parameter value '{value}' - # only 'false' or 'true' are allowed utils . terminate_fatal ( sds_glob . ERROR_00_905 . replace ( \" {value} \" , value )) return True # ------------------------------------------------------------------ # Check an integer configuration parameter value. # ------------------------------------------------------------------ @staticmethod def _check_config_value_int ( value : int | str , ) -> int : \"\"\"Check an integer configuration parameter value. Args: value (int|str): The configuration parameter value to be checked. Returns: int: The integer configuration parameter value. \"\"\" if isinstance ( value , str ): try : return int ( value ) except ValueError : # ERROR.00.906 Illegal configuration parameter value '{value}' - # only integers are allowed utils . terminate_fatal ( sds_glob . ERROR_00_906 . replace ( \" {value} \" , value )) return value # ------------------------------------------------------------------ # Check a single configuration parameter. # ------------------------------------------------------------------ def _check_single_config_param ( self , key : str , value : bool | int | str ) -> None : \"\"\"Check a single configuration parameter. Args: key (str): The name of the configuration parameter. value (bool | int | str): The given value of the configuration parameter. \"\"\" key_int = key . lower () if key_int in sds_glob . CONFIG_PARAM_COEF_MAX : self . _coef_max = self . _check_config_value_int ( value ) return if key_int in sds_glob . CONFIG_PARAM_COEF_MIN : self . _coef_min = self . _check_config_value_int ( value ) return if key_int in sds_glob . CONFIG_PARAM_DEGREE_MAX : self . _degree_max = self . _check_config_value_int ( value ) return if key_int in sds_glob . CONFIG_PARAM_DEGREE_MIN : self . _degree_min = self . _check_config_value_int ( value ) return if key_int in sds_glob . CONFIG_PARAM_NO_TASKS : self . _no_tasks = self . _check_config_value_int ( value ) return if key_int in sds_glob . CONFIG_PARAM_VERBOSE : self . _is_verbose = self . _check_config_value_bool ( value ) return # ERROR.00.903 Unknown configuration parameter: Key='{key}' Value='{value} utils . terminate_fatal ( sds_glob . ERROR_00_903 . replace ( \" {key} \" , key ) . replace ( \" {value} \" , str ( value )) ) # ------------------------------------------------------------------ # Getter method: _coef_max. # ------------------------------------------------------------------ def get_coef_max ( self ) -> int : \"\"\"Getter method: _coef_max. Returns: int: The upper limit for the random generation of the coefficients. \"\"\" return self . _coef_max # ------------------------------------------------------------------ # Getter method: _coef_min. # ------------------------------------------------------------------ def get_coef_min ( self ) -> int : \"\"\"Getter method: _coef_min. Returns: int: The lower limit for the random generation of the coefficients. \"\"\" return self . _coef_min # ------------------------------------------------------------------ # Getter method: _degree_max. # ------------------------------------------------------------------ def get_degree_max ( self ) -> int : \"\"\"Getter method: _degree_min. Returns: int: The upper limit for the random generation of the degrees. \"\"\" return self . _degree_max # ------------------------------------------------------------------ # Getter method: _degree_min. # ------------------------------------------------------------------ def get_degree_min ( self ) -> int : \"\"\"Getter method: _degree_min. Returns: int: The lower limit for the random generation of the degrees. \"\"\" return self . _degree_min # ------------------------------------------------------------------ # Getter method: _is_verbose. # ------------------------------------------------------------------ def get_is_verbose ( self ) -> bool : \"\"\"Getter method: _is_verbose. Returns: bool: Showing progress messages. \"\"\" return self . _is_verbose # ------------------------------------------------------------------ # Getter method: _no_tasks. # ------------------------------------------------------------------ def get_no_tasks ( self ) -> int : \"\"\"Getter method: _no_tasks. Returns: int: The number of tasks to be generated. \"\"\" return self . _no_tasks # ------------------------------------------------------------------ # Load and check the configuration parameters from a # configuration file. # ------------------------------------------------------------------ def load_config_file ( self , config_file : str ) -> None : \"\"\"Load and check the configuration parameters from a configuration file. Args: config_file (str): Configuration file name. \"\"\" # INFO.00.003 Initialize the configuration parameters using the file {file} utils . progress_msg_core ( sds_glob . INFO_00_001 . replace ( \" {file} \" , config_file )) config_parser = configparser . ConfigParser () config_parser . read ( config_file ) for section in config_parser . sections (): if section in ( Config . _CONFIG_SECTION ,): for ( key , value ) in config_parser . items ( section ): self . _check_config_param ( key , value ) # ------------------------------------------------------------------ # Setter method: _coef_min & _coef_max. # ------------------------------------------------------------------ def set_coef ( self , coef_min : int , coef_max : int ) -> None : \"\"\"Setter method: _coef_min & _coef_max. Args: coef_min (int): The lower limit for the random generation of the coefficients. coef_max (int): The upper limit for the random generation of the coefficients. \"\"\" self . _coef_min = coef_min self . _coef_max = coef_max self . _check_all_config_params () # ------------------------------------------------------------------ # Modify the value of an existing configuration parameter. # ------------------------------------------------------------------ def set_config_value ( self , key : str , value : bool | int | str ) -> None : \"\"\"Modify the value of an existing configuration parameter. Args: key (str): The name of the configuration parameter. value (bool | int | str): The new value of the configuration parameter. \"\"\" self . _check_config_param ( key , value ) # ------------------------------------------------------------------ # Setter method: _degree_min & _degree_max. # ------------------------------------------------------------------ def set_degree ( self , degree_min : int , degree_max : int ) -> None : \"\"\"Setter method: _degree_min & _degree_max. Args: degree_min (int): The lower limit for the random generation of the degrees. degree_max (int): The upper limit for the random generation of the degrees. \"\"\" self . _degree_min = degree_min self . _degree_max = degree_max self . _check_all_config_params () # ------------------------------------------------------------------ # Setter method: _is_verbose. # ------------------------------------------------------------------ def set_is_verbose ( self , is_verbose : bool ) -> None : \"\"\"Setter method: _is_verbose. Args: is_verbose (bool): Showing progress messages. \"\"\" self . _is_verbose = is_verbose self . _check_all_config_params () # ------------------------------------------------------------------ # Setter method: _no_tasks. # ------------------------------------------------------------------ def set_no_tasks ( self , no_tasks : int ) -> None : \"\"\"Setter method: _no_tasks. Args: no_tasks (int): The number of tasks to be generated \"\"\" self . _no_tasks = no_tasks self . _check_all_config_params ()","title":"Config"},{"location":"api_documentation.html#class-generator","text":"Class for generating a JSON file with tasks.","title":"Class Generator"},{"location":"api_documentation.html#src.polynomial.generator.Generator","text":"Class for generating a JSON file with tasks. Source code in src\\polynomial\\generator.pyclass Generator : \"\"\"Class for generating a JSON file with tasks.\"\"\" # ------------------------------------------------------------------ # Initialise the instance. # ------------------------------------------------------------------ def __init__ ( self , file_name ) -> None : \"\"\"Generate the tasks. Using configuration parameters in the 'setup.cfg' file, a JSON file containing polynomial pairs and their product as tasks can be generated with an instance of this class. Args: file_name (str): The name of the JSON file to output. \"\"\" # pylint: disable=duplicate-code sds_glob . logger . debug ( sds_glob . LOGGER_START ) # Provide progress messages. utils . progress_msg ( \"-\" * 79 ) # INFO.00.011 Start Generator utils . progress_msg ( sds_glob . INFO_00_011 ) utils . progress_msg ( \"-\" * 79 ) self . _file_name = file_name # Create polynomial pairs with random values and calculate # the product. Each generated triple defines a task for the # 'Multiplier' class. self . _tasks = [] for no_task in range ( sds_glob . inst_config . get_no_tasks ()): self . _tasks . append ( self . _generate_polynom ( no_task )) # Write the generated polynomials along with their product # to a JSON file for use in the 'Multiplier' class. self . _create_json_file () # Provide progress messages. utils . progress_msg ( \"-\" * 79 ) # INFO.00.012 End Generator utils . progress_msg ( sds_glob . INFO_00_012 ) utils . progress_msg ( \"-\" * 79 ) sds_glob . logger . debug ( sds_glob . LOGGER_END ) # ------------------------------------------------------------------ # Create the JSON file. # ------------------------------------------------------------------ def _create_json_file ( self ) -> None : \"\"\"Create the JSON file. The file structure looks as follows: { \"moTasks\": 999, \"tasks\": [ { \"taskNo\": 999, \"polynom1\": { \"degree\": 999, \"coefficients\": [ 999, ... ] }, \"polynom2\": { \"degree\": 999, \"coefficients\": [ 999, ... ] }, \"product\": { \"degree\": 999, \"coefficients\": [ 999, ... ] } }, ... ] } \"\"\" tasks = [] for task_no , ( polynom_1 , polynom_2 , product ) in enumerate ( self . _tasks ): tasks . append ( { sds_glob . JSON_NAME_TASK_NO : task_no + 1 , sds_glob . JSON_NAME_POLYNOM_1 : { sds_glob . JSON_NAME_DEGREE : polynom_1 . degree (), sds_glob . JSON_NAME_COEFFICIENTS : list ( int ( x ) for x in polynom_1 . coef ), }, sds_glob . JSON_NAME_POLYNOM_2 : { sds_glob . JSON_NAME_DEGREE : polynom_2 . degree (), sds_glob . JSON_NAME_COEFFICIENTS : list ( int ( x ) for x in polynom_2 . coef ), }, sds_glob . JSON_NAME_PRODUCT : { sds_glob . JSON_NAME_DEGREE : product . degree (), sds_glob . JSON_NAME_COEFFICIENTS : list ( int ( x ) for x in product . coef ), }, } ) with open ( self . _file_name , \"w\" , encoding = sds_glob . FILE_ENCODING_DEFAULT ) as file_handle : json . dump ( { sds_glob . JSON_NAME_NO_TASKS : sds_glob . inst_config . get_no_tasks (), sds_glob . JSON_NAME_TASKS : tasks , }, file_handle , indent = 4 , sort_keys = False , ) # ------------------------------------------------------------------ # Generation a task consisting of a polynomial pair and # their product. # ------------------------------------------------------------------ @staticmethod def _generate_task ( no_task : int ) -> Tuple [ Polynomial , Polynomial , Polynomial ]: \"\"\"Generation a task consisting of a polynomial pair and their product. The degree of the polynomials and the coefficients are determined in a given range as random integers Args: no_task (int): The task number Returns: Tuple[Polynomial, Polynomial, Polynomial]: Polynomial 1, Polynomial 2 and Polynomial 1 * Polynomial 2. \"\"\" # Start time measurement. start_time = time . time_ns () # Creation of the first polynomial. polynom_1 = Polynomial ( numpy . random . randint ( sds_glob . inst_config . get_coef_min (), sds_glob . inst_config . get_coef_max (), random . randint ( # nosec sds_glob . inst_config . get_degree_min (), sds_glob . inst_config . get_degree_max (), ), ) ) # Creation of the second polynomial. polynom_2 = Polynomial ( numpy . random . randint ( sds_glob . inst_config . get_coef_min (), sds_glob . inst_config . get_coef_max (), random . randint ( # nosec sds_glob . inst_config . get_degree_min (), sds_glob . inst_config . get_degree_max (), ), ) ) # Calculation of the product. product = polynom_1 * polynom_2 # Stop time measurement and store the results. utils . progress_msg_time_elapsed ( time . time_ns () - start_time , f \"task no. { no_task + 1 : 2d } (degrees: { polynom_1 . degree () : 5d } - \" + f \" { polynom_2 . degree () : 5d } - { product . degree () : 5d } ) generated\" , ) return polynom_1 , polynom_2 , product","title":"Generator"},{"location":"api_documentation.html#class-multiplier","text":"Class for multiplying the polynomials and checking the result.","title":"Class Multiplier"},{"location":"api_documentation.html#src.polynomial.multiplier.Multiplier","text":"Class for multiplying the polynomials and checking the resulting product. Source code in src\\polynomial\\multiplier.pyclass Multiplier : \"\"\"Class for multiplying the polynomials and checking the resulting product.\"\"\" # ------------------------------------------------------------------ # Initialise the instance. # ------------------------------------------------------------------ def __init__ ( self , file_name : str , method : str ) -> None : \"\"\"Perform the tasks from the JSON file. An instance of this class processes a JSON file created by the 'Generator' class. Three different methods for calculating the polynomial products are provided: 'fft' - a Fast Fourier Transform oriented method. 'numpy' - the polynomial multiplication of the polynomial module of NumPy 'simple' - a sequential multiplication of all terms of the two polynomials with each other and then a summation of the like terms Args: file_name (str): The name of the JSON file to process. method (str): The processing method: fft, numpy or simple. \"\"\" # pylint: disable=duplicate-code # Start the run-related time measurement. start_time = time . time_ns () sds_glob . logger . debug ( sds_glob . LOGGER_START ) # Provide progress messages. utils . progress_msg ( \"-\" * 79 ) # INFO.00.021 Start Multiplier - Python - {method} utils . progress_msg ( sds_glob . INFO_00_021 . replace ( \" {method} \" , method )) utils . progress_msg ( \"-\" * 79 ) self . _file_name = file_name self . _method = method # Check if the specified JSON file with the polynomials exists. if not os . path . isfile ( file_name ): # ERROR.00.902 The specified JSON file {file_name} does not exist utils . terminate_fatal ( sds_glob . ERROR_00_902 . replace ( \" {file_name} \" , file_name ) ) self . _poly_1_coeff : list [ int ] = [] self . _poly_1_degree = 0 self . _poly_2_coeff : list [ int ] = [] self . _poly_2_degree = 0 self . _prod_coeff : list [ int ] = [] self . _prod_degree = 0 self . _statistics : list [ tuple [ int , int , int , int ]] = [] self . _task_no = 0 # Process the polynomial multiplication tasks contained in the JSON file. with open ( self . _file_name , \"r\" , encoding = sds_glob . FILE_ENCODING_DEFAULT ) as file_handle : json_data = json . load ( file_handle ) for task_no , task in enumerate ( json_data [ sds_glob . JSON_NAME_TASKS ]): # Start the task-related time measurement. start_time_task = time . time_ns () # Store the data from the JSON file for polynomial multiplication # in instance variables self . _poly_1_coeff = task [ sds_glob . JSON_NAME_POLYNOM_1 ][ sds_glob . JSON_NAME_COEFFICIENTS ] self . _poly_1_degree = task [ sds_glob . JSON_NAME_POLYNOM_1 ][ sds_glob . JSON_NAME_DEGREE ] self . _poly_2_coeff = task [ sds_glob . JSON_NAME_POLYNOM_2 ][ sds_glob . JSON_NAME_COEFFICIENTS ] self . _poly_2_degree = task [ sds_glob . JSON_NAME_POLYNOM_2 ][ sds_glob . JSON_NAME_DEGREE ] self . _prod_coeff = task [ sds_glob . JSON_NAME_PRODUCT ][ sds_glob . JSON_NAME_COEFFICIENTS ] self . _prod_degree = task [ sds_glob . JSON_NAME_PRODUCT ][ sds_glob . JSON_NAME_DEGREE ] self . _task_no = task_no # Calculate and check the polynomial product. self . _process_task () # Stop the timing and save the measurement results. duration_task = time . time_ns () - start_time_task self . _statistics . append ( ( duration_task , self . _poly_1_degree , self . _poly_2_degree , self . _prod_degree , ) ) # Print the statistics data for this run. self . _show_statistics () # Provide progress messages. utils . progress_msg ( \"-\" * 79 ) utils . progress_msg_time_elapsed ( time . time_ns () - start_time , \"Python - \" + self . _method , ) utils . progress_msg ( \"-\" * 79 ) # INFO.00.022 End Multiplier - Python - {method} utils . progress_msg ( sds_glob . INFO_00_022 . replace ( \" {method} \" , self . _method )) utils . progress_msg ( \"-\" * 79 ) sds_glob . logger . debug ( sds_glob . LOGGER_END ) # ------------------------------------------------------------------ # Multiply the polynomials by applying Fast Fourier transform. # ------------------------------------------------------------------ def _multiply_fft ( self ): \"\"\"Multiply the polynomials by applying Fast Fourier transform.\"\"\" pass # ------------------------------------------------------------------ # Multiply the polynomials by applying the NumPy polynomial methods. # ------------------------------------------------------------------ def _multiply_numpy ( self ) -> ndarray : \"\"\"Multiply the polynomials by applying the NumPy polynomial methods. Returns: ndarray: The product of the polynomials. \"\"\" return numpy . polynomial . Polynomial ( self . _poly_1_coeff ) * numpy . polynomial . Polynomial ( self . _poly_2_coeff ) # ------------------------------------------------------------------ # Multiply the polynomials by applying the simple method. # ------------------------------------------------------------------ def _multiply_simple ( self , ) -> ndarray : \"\"\"Multiply the polynomials by applying the simple method. Returns: ndarray: The product of the polynomials. \"\"\" result = numpy . zeros ( len ( self . _poly_1_coeff ) + len ( self . _poly_2_coeff ), dtype = numpy . int64 ) # Multiply abd collect the like terms for degree_1 , coeff_1 in enumerate ( self . _poly_1_coeff ): if coeff_1 != 0 : for degree_2 , coeff_2 in enumerate ( self . _poly_2_coeff ): if coeff_2 != 0 : result [ degree_1 + degree_2 ] += coeff_1 * coeff_2 # Eliminate the leading zero terms and determine # the final degree of the polynomial product. zeros = [] for degree in range ( len ( result ) - 1 , - 1 , - 1 ): if result [ degree ] == 0 : zeros . append ( degree ) else : break if zeros : result = numpy . delete ( result , zeros ) return result # ------------------------------------------------------------------ # Perform the processing of a polynomial multiplication task. # ------------------------------------------------------------------ def _process_task ( self ): \"\"\"Perform the processing of a polynomial multiplication task.\"\"\" result = [] if self . _method == sds_glob . ARG_METHOD_FFT : self . _multiply_fft () elif self . _method == sds_glob . ARG_METHOD_NUMPY : self . _multiply_numpy () else : result = self . _multiply_simple () # Compare the new calculated product with the given product # in the JSON file. for degree , coeff in enumerate ( result ): if coeff != self . _prod_coeff [ degree ]: # ERROR.00.911 Difference in task no. {task_no} degree {degree} # got {got} instead of {instead} utils . terminate_fatal ( sds_glob . ERROR_00_911 . replace ( \" {task_no} \" , str ( self . _task_no + 1 )) . replace ( \" {degree} \" , str ( degree )) . replace ( \" {got} \" , str ( coeff )) . replace ( \" {instead} \" , str ( self . _prod_coeff [ degree ]), ) ) # ------------------------------------------------------------------ # Display the statistics. # ------------------------------------------------------------------ def _show_statistics ( self ): \"\"\"Display the statistics.\"\"\" for task_no , ( duration , poly_1_degree , poly_2_degree , prod_degree , ) in enumerate ( self . _statistics ): utils . progress_msg_time_elapsed ( duration , f \"task no. { task_no + 1 : 2d } (degrees: { poly_1_degree : 5d } - \" + f \" { poly_2_degree : 5d } - { prod_degree : 5d } ) executed\" , )","title":"Multiplier"},{"location":"api_documentation.html#class-polynomialerror","text":"Exception of polynomial application.","title":"Class PolynomialError"},{"location":"api_documentation.html#src.polynomial.polynomial_error.PolynomialError","text":"Bases: RuntimeError Exception of polynomial application. Source code in src\\polynomial\\polynomial_error.py 8 9 10 11 12 13 class PolynomialError ( RuntimeError ): \"\"\"Exception of **polynomial** application.\"\"\" def __init__ ( self , error_msg ): \"\"\"Constructor.\"\"\" super () . __init__ ( error_msg )","title":"PolynomialError"},{"location":"api_documentation.html#module-launcher","text":"Module polynomial: Entry Point Functionality. This is the entry point to the application polynomial .","title":"Module launcher"},{"location":"api_documentation.html#src.polynomial.launcher.main","text":"Entry point. The actions to be carried out are selected via command line arguments. Parameters: Name Type Description Default argv list [ str ] Command line arguments. required Source code in src\\polynomial\\launcher.py 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 def main ( argv : list [ str ]) -> None : \"\"\"Entry point. The actions to be carried out are selected via command line arguments. Args: argv (list[str]): Command line arguments. \"\"\" # Start time measurement. start_time = time . time_ns () # Provide progress messages. utils . progress_msg ( \"=\" * 79 ) # INFO.00.004 Start Launcher. utils . progress_msg ( sds_glob . INFO_00_003 ) # Initialise the logging functionality.. utils . initialise_logger () sds_glob . logger . debug ( sds_glob . LOGGER_START ) sds_glob . logger . debug ( \"param argv= %s \" , argv ) locale . setlocale ( locale . LC_ALL , _LOCALE ) # Load the command line arguments. args = _get_args () # Take JSON file name from environment variable file_name = os . getenv ( sds_glob . POLYNOMIAL_FILE_NAME ) # Perform the processing if args [ _ARG_ACTION ] == sds_glob . ARG_ACTION_GENERATE : generator . Generator ( file_name ) elif args [ _ARG_ACTION ] == sds_glob . ARG_ACTION_MULTIPLY : multiplier . Multiplier ( file_name , args [ _ARG_METHOD ]) # Stop time measurement. utils . progress_msg_time_elapsed ( time . time_ns () - start_time , \"launcher\" , ) # Provide progress messages. utils . progress_msg ( \"-\" * 79 ) # INFO.00.005 End Launcher utils . progress_msg ( sds_glob . INFO_00_006 ) utils . progress_msg ( \"=\" * 79 ) sds_glob . logger . debug ( sds_glob . LOGGER_END )","title":"main()"},{"location":"api_documentation.html#module-utils","text":"Miscellaneous helper functions.","title":"Module utils"},{"location":"api_documentation.html#src.polynomial.utils.initialise_logger","text":"Initialise the root logging functionality. Source code in src\\polynomial\\utils.py 26 27 28 29 30 31 32 33 34 35 36 37 def initialise_logger () -> None : \"\"\"Initialise the root logging functionality.\"\"\" with open ( _LOGGER_CFG_FILE , \"r\" , encoding = sds_glob . FILE_ENCODING_DEFAULT ) as file_handle : log_config = yaml . safe_load ( file_handle . read ()) logging . config . dictConfig ( log_config ) sds_glob . logger . setLevel ( logging . DEBUG ) # The logger is configured and ready. progress_msg_core ( sds_glob . INFO_00_004 )","title":"initialise_logger()"},{"location":"api_documentation.html#src.polynomial.utils.progress_msg","text":"Create a progress message. Parameters: Name Type Description Default msg str Progress message. required Source code in src\\polynomial\\utils.py 43 44 45 46 47 48 49 50 def progress_msg ( msg : str ) -> None : \"\"\"Create a progress message. Args: msg (str): Progress message. \"\"\" if sds_glob . inst_config . get_is_verbose (): progress_msg_core ( msg )","title":"progress_msg()"},{"location":"api_documentation.html#src.polynomial.utils.progress_msg_core","text":"Create a progress message. Parameters: Name Type Description Default msg str Progress message. required Source code in src\\polynomial\\utils.py 56 57 58 59 60 61 62 63 64 65 66 67 def progress_msg_core ( msg : str ) -> None : \"\"\"Create a progress message. Args: msg (str): Progress message. \"\"\" final_msg = _LOGGER_PROGRESS_UPDATE + str ( datetime . datetime . now ()) + \" : \" + msg if msg not in ( \"\" , \"-\" * 80 , \"=\" * 80 ): final_msg = final_msg + \".\" print ( final_msg )","title":"progress_msg_core()"},{"location":"api_documentation.html#src.polynomial.utils.progress_msg_time_elapsed","text":"Create a time elapsed message. Parameters: Name Type Description Default duration int Time elapsed in ns. required event str Event. required Source code in src\\polynomial\\utils.py 73 74 75 76 77 78 79 80 81 82 83 def progress_msg_time_elapsed ( duration : int , event : str ) -> None : \"\"\"Create a time elapsed message. Args: duration (int): Time elapsed in ns. event (str): Event. \"\"\" if sds_glob . inst_config . get_is_verbose (): progress_msg_core ( f \" { f ' { duration : , } ' : >20 } ns - Total time { event } \" , )","title":"progress_msg_time_elapsed()"},{"location":"api_documentation.html#src.polynomial.utils.terminate_fatal","text":"Terminate the application immediately. Parameters: Name Type Description Default error_msg str Error message. required Source code in src\\polynomial\\utils.py 89 90 91 92 93 94 95 96 97 98 99 100 def terminate_fatal ( error_msg : str ) -> None : \"\"\"Terminate the application immediately. Args: error_msg (str): Error message. \"\"\" print ( \"\" ) print ( _LOGGER_FATAL_HEAD ) print ( _LOGGER_FATAL_HEAD , error_msg , _LOGGER_FATAL_TAIL , sep = \"\" ) print ( _LOGGER_FATAL_HEAD ) raise PolynomialError ( error_msg )","title":"terminate_fatal()"}]}